.\" Revision 1.0 93/06/3 23:00  chk
.\" Initial revision
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright 1998 by MATSUMOTO Shoji. All Rights Reserved.
.\" Translated Wed Mar 11 1998 by MATSUMOTO Shoji.
.\" Updated Sat 23 Oct 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Tue 16 Nov 1999 by NAKANO Takeo
.\" Updated & Modified Sun Sep  2 23:47:38 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified Tue Nov 13 01:11:52 JST 2001 by Yuichi SATO 
.\" Updated Sun 6 Oct 2002 by NAKANO Takeo
.\" Updated & Modified Sat Apr 17 16:36:26 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Tue May  3 07:35:07 JST 2005 by Yuichi SATO 
.\" Updated & Modified Wed Feb 28 01:32:55 JST 2007 by Yuichi SATO, v1.39
.\"
.TH TUNE2FS 8 "February 2012" "E2fsprogs version 1.42.1" 
.SH 名前
tune2fs \- ext2/ext3/ext4 ファイルシステムのパラメータを調整する
.SH 書式
\fBtune2fs\fP [ \fB\-l\fP ] [ \fB\-c\fP \fImax\-mount\-counts\fP ] [ \fB\-e\fP
\fIerrors\-behavior\fP ] [ \fB\-f\fP ] [ \fB\-i\fP \fIinterval\-between\-checks\fP ] [ \fB\-j\fP
] [ \fB\-J\fP \fIjournal\-options\fP ] [ \fB\-m\fP \fIreserved\-blocks\-percentage\fP ] [
\fB\-o\fP [^]mount\-options\fI[,...]\fP ] [ \fB\-r\fP \fIreserved\-blocks\-count\fP ] [ \fB\-s\fP
\fIsparse\-super\-flag\fP ] [ \fB\-u\fP \fIuser\fP ] [ \fB\-g\fP \fIgroup\fP ] [ \fB\-C\fP
\fImount\-count\fP ] [ \fB\-E\fP \fIextended\-options\fP ] [ \fB\-L\fP \fIvolume\-name\fP ] [
\fB\-M\fP \fIlast\-mounted\-directory\fP ] [ \fB\-O\fP [^]\fIfeature\fP[,...] ] [ \fB\-Q\fP
\fIquota\-options\fP ] [ [ \fB\-T\fP \fItime\-last\-checked\fP ] [ \fB\-U\fP \fIUUID\fP ] device
.SH 説明
システム管理者は \fBtune2fs\fP により Linux ext2, ext3, ext4
ファイルシステムの様々なパラメータを調整できる。現在サポートされているオプションは、\fBtune2fs\fP(8) プログラムの \fB\-l\fP
オプション、または \fBdumpe2fs\fP(8) プログラムで表示できる。
.PP
\fIdevice\fP ファイル名 (例: /dev/sda1) で指定できる。また、LABEL、UUID で
"\fBLABEL=\fP\fIvolume\-name\fP" または "\fBUUID=\fP\fIuuid\fP" (例: LABEL=home または
UUID=e40486c6\-84d5\-4f2f\-b99c\-032281799c9d) のように指定できる。
.SH オプション
.TP 
\fB\-c\fP\fI max\-mount\-counts\fP
\fBe2fsck\fP(8)  がファイルシステムのチェックを行うマウント回数を設定する。 \fImax\-mount\-counts\fP が 0 または \-1
の場合、 \fBe2fsck\fP(8)  とカーネルはファイルシステムのマウント回数を考慮しない。
.sp
ジャーナリングファイルシステムを使っている場合、 ファイルシステムを強制的にチェックするマウント回数を ファイルシステムごとにちょっとずつ変えておけば、
すべてのファイルがいっぺんにまとめてチェックされるのを 避けることができる。
.sp
マウント回数に依存したチェックを完全に停止してしまうなら、
その影響を慎重に考えておくべきである。
ディスクドライブ、ケーブル、メモリの故障やカーネルのバグによって、
マークされたりエラーが出ることもなく、ファイルシステムが破壊されることもあり得る。
ファイルシステムにジャーナリング機能を使っていると、ファイルシステムに
壊れたというマークが付けられることは \fB絶対にない\fP ので、
通常ジャーナリングファイルシステムはチェックされない。
この場合でも、カーネルがファイルシステムエラーを検知すれば、
次のブート時に fsck が実行されるが、
この時点ではデータ喪失を防ぐにはもう遅すぎるかもしれない。
.sp
時間に依存したチェックを行う \fB\-i\fP オプションも参照すること。
.TP 
\fB\-C\fP\fI mount\-count\fP
ファイルシステムがマウントされた回数を設定する。 \fB\-c\fP オプションで設定された最大マウント回数の パラメータより大きな値が設定されると、
\fBe2fsck\fP(8)  は次のブート時に、そのファイルシステムをチェックする。
.TP 
\fB\-e\fP\fI error\-behavior\fP
エラーが発生した時のカーネルの挙動を変更する。 いずれにしてもファイルシステムにエラーが起こると、 次のブート時には必ず \fBe2fsck\fP(8)
がそのファイルシステムをチェックする。 \fIerror\-behavior\fP に指定できるのは次の通り。
.RS 1.2i
.TP  1.2i
\fBcontinue\fP
通常の実行を継続する。
.TP 
\fBremount\-ro\fP
ファイルシステムを read\-only でマウントしなおす。
.TP 
\fBpanic\fP
カーネルパニックを起こす。
.RE
.TP 
\fB\-E\fP\fI extended\-options\fP
ファイルシステムの拡張オプションを設定する。拡張オプションはカンマ区切りで、イコール ('=')
を使って引数を指定できる。以下の拡張オプションがサポートされている。
.RS 1.2i
.TP 
\fBclear_mmp\fP
(もし存在すれば) MMP ブロックをリセットして、クリーンな状態に戻す。デバイスが現在マウントされておらず、fsck
されているのが確実な場合にのみ使うべきである。さもないと典型的なファイルシステムの破損が起こる可能性がある。'\-f' を指定する必要がある。
.TP 
\fBmmp_update_interval=\fP\fIinterval\fP
MMP 更新間隔の初期値を \fIinterval\fP 秒にする。\fIinterval\fP を 0 に設定すると、デフォルトの更新間隔を使う。間隔は 300
秒より短くしなければならない。\fBmmp\fP feature を有効にしておく必要がある。
.TP 
\fBstride=\fP\fIstride\-size\fP
RAID アレイのファイルシステムに対して、\fIstride\-size\fP
ファイルシステムブロックに設定する。次のディスクに移動するまで、このブロック数で読み書きされ、\fIチャンクサイズ\fPとも呼ばれる。このサイズはビットマップのようなファイルシステムメタデータの配置に影響する。\fBmke2fs\fP(2)
の実行時にメタデータを 1 つのディスクに置くと、性能を害する可能性がある。また、このサイズはブロックアロケータでも使われる。
.TP 
\fBstripe_width=\fP\fIstripe\-width\fP
RAID アレイのファイルシステムに対して、1 ストライプあたりのファイルシステムブロックを　\fIstripe\-width\fP
に設定する。一般的にこのサイズは、 N を RAID のデータ格納ディスクとしたとき、stride\-size * N である (例えば、RAID 5
N+1、RAID 6 N+2 である)。これにより、データが書き込まれる時に、ブロックアロケータが RAID
ストライプにパリティの読み込み\-修正\-書き込みを行うのを防止する。
.TP 
\fBhash_alg=\fP\fIhash\-alg\fP
ハッシュ付き b\-tree ディレクトリを含む新しいファイルシステムで使われるデフォルトのハッシュアルゴリズムを設定する。指定可能なアルゴリズムは
\fIlegacy\fP, \fIhalf_md4\fP, \fItea\fP である。
.TP 
\fBmount_opts=\fP\fImount_option_string\fP
ファイルシステムをマウントする際の、デフォルトのマウントオプションを設定する。\fB\-o\fP
オプションで指定されるビットマスクベースのデフォルトのマウントオプションと異なり、\fImount_option_string\fP は最大 63
バイトの任意の文字列で、スーパーブロックに格納される。
.IP
ext4 ファイルシステムドライバーは、\fBmount\fP(8)
プログラムから渡されるマウントオプションを解析する前に、最初にビットマスクベースのデフォルトオプションを適用し、次に
\fImount_option_string\fP を解析する。
.IP
このスーパーブロック設定は、2.6.35 以降のカーネルでのみサポートされ、ext2 と ext3 ファイルシステムドライバーではサポートされない。
.TP 
\fBtest_fs\fP
ファイルシステムスーパーブロックのフラグを設定し、ext4dev ファイルシステムのような、実験的なカーネルコードを使ってマウントするようにする。
.TP 
\fB^test_fs\fP
test_fs フラグをクリアし、ファイルシステムを製品レベルのコードのみでマウントする。
.RE
.TP 
\fB\-f\fP
エラーが起きたときでも tune2fs に動作を完了させる。 このオプションは、外部ジャーナルを使っているファイルシステム
(あるいは壊れてそう見えるようになってしまったファイルシステム) から、 外部ジャーナルが見えない場合に \fBhas_journal\fP
ファイルシステム属性を削除するのに便利である。
.sp
\fB警告:\fP クリーンにアンマウントされなかったファイルシステムに対して ジャーナルを一度もリプレイしないまま、
その外部ジャーナルをファイルシステムから切り離してしまうと、 重大なデータ喪失やファイルシステムの破壊をもたらすかもしれない。
.TP 
\fB\-g\fP\fI group\fP
予約 (reserved) ファイルシステムブロックを利用できるグループを設定する。 \fIgroup\fP パラメータには GID
を数値で指定することも、グループ名を指定することもできる。 グループ名が指定された場合は、スーパーブロックに格納される前に GID の数値に変換される。
.TP 
\fB\-i  \fP\fIinterval\-between\-checks\fP[\fBd\fP|\fBm\fP|\fBw\fP]
ファイルシステムをチェックする最大の時間間隔を設定する。 数値のみ、もしくは末尾に \fBd\fP を付けると
\fIinterval\-between\-checks\fP は「日」と解釈され、 \fBm\fP, \fBw\fP はそれぞれ「月」「週」と解釈される。 0
を指定すると、時間依存のチェックはしなくなる。
.sp
\fB\-c\fP (マウント回数に依存しない)、または \fB\-i\fP (時間に依存しない) チェックを有効にして、ファイルシステムの定期的な
\fBe2fsck\fP(8) でのフルチェックを有効にすることを推奨する。そうしないと、(ディスク、ケーブル、メモリの故障や、カーネルバグによる)
ファイルシステムの破損が知らされず、最終的にデータの喪失や破損につながる。
.TP 
\fB\-j\fP
ext3 ジャーナルをファイルシステムに追加する。 \-J オプションが指定されていない場合は、 デフォルトのジャーナルパラメータが用いられ、
(ファイルシステムのサイズに対して)  適切な大きさのジャーナルを作成してファイルシステムに格納する。 ジャーナルを実際に使用するためには、 ext3
をサポートするカーネルが必要である。
.IP
このオプションを使用して、 マウントされたファイルシステム上にジャーナルを作成すると、 不変 (immutable) ファイル \fB.journal\fP
がファイルシステムのトップディレクトリに作成される。 これはファイルシステムがマウントされている間に ジャーナル inode
を安全に作成する唯一の方法だからである。 ext3 ジャーナルは可視であるが、 ファイルシステムがマウントされている間に
削除したり修正したりするのは安全ではない。 そのためジャーナルファイルは不変にされている。 アンマウントされたファイルシステムをチェックする場合、
\fBe2fsck\fP(8)  は自動的に \fB.journal\fP ファイルを可視でない予約済みジャーナル inode に移動する。
ルートファイルシステム以外の全てのファイルシステムに対して、 次のリブートサイクルで、これが自動的に当然行われるべきである。 ルートファイルシステムは
read\-only でマウントされるので、 この遷移を有効にするためには、 \fBe2fsck\fP(8)
をレスキュー用フロッピーから実行しなければならない。
.IP
Debian のようないくつかのディストリビューションでは、 レスキュー用フロッピーを使って ext3 ジャーナルを
ルートファイルシステムに追加する必要がないように、 \fB/etc/fstab\fP ファイルで ext3
ファイルシステムをルートファイルシステムに指定しておくと、 初期 RAM ディスクが使用されたときに、 initrd スクリプトが自動的に ext2
ルートファイルシステムを ext3 に変換する。
.TP 
\fB\-J\fP journal\-options
デフォルトの ext3 ジャーナルパラメータを変更する。 ジャーナルオプションはコンマで区切り、引き数がある場合には 「=
(イコール)」記号を使って指定する。 以下のジャーナルオプションがサポートされている:
.RS 1.2i
.TP 
\fBsize=\fP\fIjournal\-size\fP
サイズ \fIjournal\-size\fP メガバイトのジャーナルを作成してファイルシステムに格納する。 ジャーナルのサイズは最低 1024
ファイルシステムブロックである (例えば、1kB のブロックを使っている場合は 1 MB、 4kB のブロックを使っている場合は 4 MB である)。
また、ファイルシステムブロックは 102,400 未満でなければならない。 ファイルシステムには、指定したサイズのジャーナルを作成するために
十分な空きスペースがなくてはならない。
.TP 
\fBdevice=\fP\fIexternal\-journal\fP
\fIexternal\-journal\fP にあるジャーナルブロックデバイスにファイルシステムを付加する。 外部ジャーナルは、コマンド
.IP
\fBmke2fs \-O journal_dev\fP \fIexternal\-journal\fP
.IP
を使い、前もって作成されていなければならない。 \fIexternal\-journal\fP は、それを使うファイルシステムと同じブロックサイズで
フォーマットされていなければならない。 1 つの外部ジャーナルに複数のファイルシステムを付加することは、 (訳注: ファイルシステム自体では)
サポートしているが、 Linux カーネルと \fBe2fsck\fP(8)  は現在のところ共有外部ジャーナルをサポートしていない。
.IP
デバイス名を直接指定する代わりに、
\fBLABEL=\fP\fIlabel\fP や \fBUUID=\fP\fIUUID\fP という形式で \fIexternal\-journal\fP を指定することもできる。
この形式では、外部ジャーナルの場所を、 ジャーナルの先頭の ext2 スーパーブロックに格納されている
UUID やボリュームラベルで指定する。 ジャーナルデバイスのボリュームラベルと
UUID を表示するには、 \fBdumpe2fs\fP(8) を使うこと。 \fBtune2fs\fP(8)  の \fB\-L\fP オプションも参照のこと。
.RE
.IP
ひとつのファイルシステムに対しては、 \fBsize\fP オプションと \fBdevice\fP オプションのどちらか一方しか指定できない。
.TP 
\fB\-l\fP
このプログラムで設定可能な値を含むファイルシステムスーパーブロックの内容を表示する。
.TP 
\fB\-L\fP\fI volume\-label\fP
ファイルシステムのボリュームラベルを設定する。 ext2 ファイルシステムラベルは最大 16 文字まで指定できる。 \fIvolume\-label\fP が
16 文字より長いと \fBtune2fs\fP は超過分を切捨て、警告メッセージを出力する。 ボリュームラベルは \fBmount\fP(8),
\fBfsck\fP(8), \fB/etc/fstab\fP(5)  (まだあるかも) において、 \fB/dev/hda5\fP
のようなブロックスペシャルデバイス名の代わりに、 \fBLABEL=\fP\fIvolume_label\fP という形式で指定して使うことができる。
.TP 
\fB\-m\fP\fI reserved\-blocks\-percentage\fP
特権プロセスによって確保されるファイルシステムの割合を %
で設定する。特権プロセスが使うファイルシステムブロック数を予約して、ファイルシステムの断片化を避けて、非特権プロセスがファイルシステムに書き込むのを防止して、\fBsyslogd\fP(8)
のようなシステムデーモンが正常に動き続けるのを可能にする。通常、予約ブロックのデフォルトは 5% である。
.TP 
\fB\-M\fP\fI last\-mounted\-directory\fP
ファイルシステムを最後にマウントしたディレクトリを設定する。
.TP 
\fB\-o\fP [^]\fImount\-option\fP[,...]
指定されたデフォルトのマウントオプションを ファイルシステムにセット/クリアする。 デフォルトのマウントオプションは、 \fB/etc/fstab\fP(5)
または \fBmount\fP(8)  のコマンドライン引き数で指定される マウントオプションで上書きできる。 古いカーネルは、この属性をサポートしていない。
特に 2.4.20 より前のカーネルは、 スーパーブロックにあるデフォルトのマウントオプションを ほぼ確実に無視する。
.IP
属性をコンマで区切ることにより、 1 つ以上のマウントオプションをクリア/セットできる。 キャレット文字 ('^') を前につけたマウントオプションは、
ファイルシステムのスーパーブロックからクリアされる。 前置文字のないマウントオプションと プラス文字 ('+') を前につけたマウントオプションは、
ファイルシステムに追加される。
.IP
\fBtune2fs\fP を使ってセット/クリアできるマウントオプションは以下の通り:
.RS 1.2i
.TP 
\fBdebug\fP
このファイルシステムのデバッグコードを有効にする。
.TP 
\fBbsdgroups\fP
新しいファイルを作成するときに、BSD の動作をエミュレートする。 新規作成されるファイルは、 自身が作成されるディレクトリのグループ ID を使う。
標準的な System V の動作をデフォルトとする。 ディレクトリに setgid ビットセットがない場合、
新規作成されたファイルはカレントプロセスの fsgid を使う。 ディレクトリに setgid ビットセットがある場合、
新規作成されたファイルは親ディレクトリのグループ ID を使い、 新規作成されたのがディレクトリならば、setgid ビットセットも設定する。
.TP 
\fBuser_xattr\fP
ユーザ固有の拡張属性を有効にする。
.TP 
\fBacl\fP
Posix アクセス制御リスト (Access Control List) を有効にする。
.TP 
\fBuid16\fP
32 ビットのユーザ ID とグループ ID を無効にする。 これは 16 ビットの値のみを格納したり想定したりする
古いカーネルとの相互運用のためにある。
.TP 
\fBjournal_data\fP
ジャーナリングを有効にしてファイルシステムがマウントされている場合、 (メタデータだけでなく) 全てのデータは
メインのファイルシステムに書き込まれる前に ジャーナルにコミットされる。
.TP 
\fBjournal_data_ordered\fP
ジャーナリングを有効にしてファイルシステムがマウントされている場合、 メタデータがジャーナルにコミットされる前に、
全てのデータをメインのファイルシステムに強制的に直接書き込む。
.TP 
\fBjournal_data_writeback\fP
ジャーナリングを有効にしてファイルシステムがマウントされている場合、 メタデータがジャーナルにコミットされた後に、
データをメインのファイルシステムに書き込む。 これはスループットを向上させるが、 クラッシュしてジャーナルによる回復をした後で、
ファイルに古いデータが現れるのを許してしまう。
.TP 
\fBnobarrier\fP
ジャーナルのバリア操作を無効化してファイルシステムをマウントする (このオプションは、2.6.35 以降のカーネルの ext4
ファイルシステムでのみサポートされる)。
.TP 
\fBblock_validity\fP
block_validity
オプションを有効化して、ファイルシステムをマウントする。これは、ファイルシステムの読み書きの後に、追加のチェックを行う。このオプションは、inode
テーブルまたはブロックグループディスクリプタのファイルシステムダメージ部分を上書きすることによるメタデータブロックの破損を防止する。これはメモリと
CPU のオーバーヘッドを大きくするので、デバッグのためだけに有効化される (このオプションは、2.6.35 以降のカーネルの ext4
ファイルシステムでのみサポートされる)。
.TP 
\fBdiscard\fP
discard オプションを付けてファイルシステムをマウントする。このオプションは、いくつかのストレージデバイスのドライバー
(企業レベルのストレージアレイで利用可能な SSD とシンプロビジョニングドライバー) で trim/discard feature
を使うようにし、削除されたファイルに紐付くブロックをストレージデバイスが他の目的に使えるようにする (このオプションは、2.6.35 以降のカーネルの
ext4 ファイルシステムでのみサポートされる)。
.TP 
\fBnodelalloc\fP
nodelalloc マウントオプションを付けてファイルシステムをマウントする。このオプションは delayed allocation feature
を無効にする (このオプションは、2.6.35 以降のカーネルの ext4 ファイルシステムでのみサポートされる)。
.RE
.TP 
\fB\-O\fP [^]\fIfeature\fP[,...]
指定したファイルシステム属性 (オプション) をセット/クリアする。 コンマで区切ることにより、 2
つ以上のファイルシステム属性をクリアまたはセットできる。 キャレット文字 ('^') を前においたファイルシステム属性は、
ファイルシステムのスーパーブロックからクリアされる。 前置文字のないファイルシステム属性と プラス文字 ('+') を前においたファイルシステム属性は、
ファイルシステムにセットされる。
.IP
\fBtune2fs\fP を使ってセット/クリアできるファイルシステム属性は以下の通り:
.RS 1.2i
.TP 
\fBdir_index\fP
ハッシュ B ツリーを使い、 ファイルが多いディレクトリ内での検索を高速化する。
.TP 
\fBdir_nlink\fP
1 ディレクトリあたり 65000 より多いサブディレクトリを利用可能にする。
.TP 
\fBfiletype\fP
ディレクトリエントリにファイルタイプ情報を格納する。
.TP 
\fBflex_bg\fP
ブロックグループのビットマップと inode テーブルを、ストレージメディアの任意の場所に置けるようにする。\fBtune2fs\fP は inode
テーブルとアロケーションビットマップの場所を再変更せず、\fBmke2fs\fP(8)
が新たにフォーマットされたファイルシステムを作成する際に、\fBflex_bg\fP を有効にされていると再変更が行われる。
.TP 
\fBhas_journal\fP
ジャーナルを使うことにより、 異常なシャットダウンが起こってもファイルシステムの一貫性を保証する。 このファイルシステム属性をセットするのは、
\fB\-j\fP オプションを使うのと等しい。
.TP 
\fBlarge_file\fP
ファイルシステムが 2GB より大きいファイルを格納できる。(最近のカーネルは、2GB より大きいファイルが作られるときに、この feature
を自動的に設定する。)
.TP 
\fBresize_inode\fP
ブロックグループディスクリプタテーブルが将来大きくなるのに備えて領域を確保する。\fBtune2fs\fP はこのファイルシステム feature
のクリアのみをサポートしている。
.TP 
\fBmmp\fP
複数マウント防止 (multiple mount protection, MMP) feature を有効または無効にする。MMP
は、ファイルシステムが複数マウントされるのを防止し、共有ストレージ環境で役立つ。
.TP 
\fBsparse_super\fP
大きなファイルシステム上でディスク使用量を少なくするために、 バックアップスーパーブロックの数を制限する。
.TP 
\fBuninit_bg\fP
カーネルがビットマップと inode テーブルを初期化と、ファイルシステムの未使用 inode
のハイウォーターマークの保持を可能にして、\fBe2fsck\fP(8) の時間を削減する。この feature を有効にした後の初めて e2fsck
を実行では、完全に実行するのに時間がかかる。しかし、その後の e2fsck では、ファイルシステムの使用量に応じて、元の時間の一部で済む。
.RE
.IP
\fBsparse_super\fP, \fBuninit_bg\fP, \fBfiletype\fP, \fBresize_inode\fP ファイルシステム
features を設定、またはクリアした後、\fBe2fsck\fP(8)
をファイルシステムに実行し、ファイルシステムを一貫した状態に戻さなければならない。\fBtune2fs\fP は、必要に応じて、システム管理者が
\fBe2fsck\fP(8) を実行する必要がある旨のメッセージを表示する。\fBdir_index\fP feature を設定した後、\fBe2fsck \-D\fP
を実行し、既存のディレクトリをハッシュ付き B\-tree 形式に変換する必要がある。特定のファイルシステム feature を有効にすると、その
feature をサポートしていないカーネルでファイルシステムをマウントできなくなる。特に \fBuninit_bg\fP と \fBflex_bg\fP
feature は、ext4 ファイルシステムでのみサポートされる。
.TP 
\fB\-p\fP\fI mmp_check_interval\fP
MMP チェック間隔を設定した秒数にする。デフォルトは 5 秒である。
.TP 
\fB\-r\fP\fI reserved\-blocks\-count\fP
予約ファイルシステムブロックの量をブロック数で設定する。
.TP 
\fB\-Q\fP\fI quota\-options\fP
\&'quota' feature をスーパーブロックに設定し、指定したクォータタイプのクォータファイルを動作させる。クォータオプションは以下の 1
つ以上を設定できる。
.RS 1.2i
.TP 
\fB[^]usrquota\fP
スーパーブロックのユーザクォータ inode を設定またはクリアする。\fB[^]grpquota\fP スーパーブロックのグループクォータ inode
を設定またはクリアする。
.TP 
\fB\-T\fP\fI time\-last\-checked\fP
ファイルシステムが最後に \fBe2fsck\fP によってチェックされた時刻を設定する。
時刻は現在 (ローカル) のタイムゾーンで解釈される。
このオプションは、Logical Volume Manager を使い、
整合性の取れている状態のファイルシステムのスナップショットを取っておき、
忙しくない時間帯にそのファイルシステムがハードウェア障害などによって
壊れていないかを調べるようなスクリプトで用いると便利である。
ファイルシステムがクリーンなら、このオプションを使って
オリジナルのファイルシステムの最終チェック時刻を設定すればよい。
\fItime\-last\-checked\fP の書式は、国際時刻書式に、オプションの時刻指定子を
加えたもので、YYYYMMDD[HH[MM[SS]]] である。
\fBnow\fP というキーワードも利用でき、
この場合は最終チェック時刻は現在の時刻に設定される。
.TP 
\fB\-u\fP\fI user\fP
予約ファイルシステムブロックを利用できるユーザを設定する。 \fIuser\fP は UID を数値で指定することも、ユーザ名で指定することもできる。
グループ名が指定された場合は、スーパーブロックに格納される前に UID の数値に変換される。
.TP 
\fB\-U\fP\fI UUID\fP
UUID (universally unique identifier: 汎システム的に他とは重ならない識別子) を \fIUUID\fP に設定する。
UUID はハイフンで区切られた 16 進数の列で、 "c1b9d5a2\-f162\-11cf\-9ece\-0020afc76f16" のような形式である。
\fIUUID\fP パラメータは以下のいずれか 1 つである:
.RS 1.2i
.TP 
\fIclear\fP
ファイルシステムの UUID をクリアする。
.TP 
\fIrandom\fP
新しい UUID をランダムに生成する。
.TP 
\fItime\fP
新しい UUID を時刻をもとに生成する。
.RE
.IP
UUID は \fBmount\fP(8), \fBfsck\fP(8), \fB/etc/fstab\fP(5)  (まだあるかも) において、
\fB/dev/hda1\fP のようなブロックスペシャルデバイス名の代わりに、 \fBUUID=\fP\fIuuid\fP という形式で指定して使うことができる。
.IP
より詳しい情報は \fBuuidgen\fP(8)  を参照すること。 \fI/dev/random\fP や \fI/dev/urandom\fP
のような優れた乱数発生器がシステムに存在しない場合、 \fBtune2fs\fP はランダムに生成した UUID ではなく、 時刻に基づいた UUID
を自動的に使用する。
.SH バグ
現時点では見付かっていない。しかし、バグがないという意味ではない。
.SH 作者
\fBtune2fs\fP は、Remy Card <Remy.Card@linux.org> によって作成された。 現在は Theodore
Ts'o <tytso@alum.mit.edu> によってメンテナンスされている。 \fBtune2fs\fP は Thodre Ts'o
<tytso@mit.edu> によって作成された ext2fs ライブラリを使用している。 このマニュアルは
<chk@data\-hh.Hanse.de> によって作成された。 時間に依存するチェックは Uwe Ohse
<uwe@tirka.gun.de> によって付加された。
.SH 入手方法
\fBtune2fs\fP は e2fsprogs パッケージの一部であり、 http://e2fsprogs.sourceforge.net
から入手できる。
.SH 関連項目
\fBdebugfs\fP(8), \fBdumpe2fs\fP(8), \fBe2fsck\fP(8), \fBmke2fs\fP(8)
