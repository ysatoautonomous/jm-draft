.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (c) 2006, 2007, 2008, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-09 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-18 by Michael Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2007-07-08, mtk, added an example program; updated SYNOPSIS
.\" 2008-05-08, mtk, Describe rules governing ownership of new files
.\"     (bsdgroups versus sysvgroups, and the effect of the parent
.\"     directory's set-group-ID mode bit).
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 Yosiaki Yanagihara
.\"         all rights reserved.
.\" Translated 1996-06-24, Yosiaki Yanagihara <yosiaki@bsd2.kbnes.nec.co.jp>
.\" Modified 1998-05-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2004-02-29, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Wed Dec 29 06:48:16 JST 2004 by Yuichi SATO
.\" Updated 2007-09-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.64
.\" Updated 2008-08-09, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated & Modified Tue Jan 12 19:09:02 JST 2021
.\"         by Yuichi SATO <ysato444@ybb.ne.jp>, LDP v5.07
.\"
.TH CHOWN 2 2020-06-09 "Linux" "Linux Programmer's Manual"
.SH 名前
chown, fchown, lchown, fchownat \- ファイルの所有者を変更する
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBint chown(const char *\fP\fIpathname\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP
\fBint fchown(int \fP\fIfd\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP
\fBint lchown(const char *\fP\fIpathname\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP

\fB#include <fcntl.h>           \fP/* AT_* 定数の定義 */
\fB#include <unistd.h>\fP
.PP
\fBint fchownat(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB,\fP
\fB             uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.PP
\fBfchown\fP(), \fBlchown\fP():
.PD 0
.ad l
.RS 4
.\"O /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
/* glibc 2.12 以降: */ _POSIX_C_SOURCE\ >=\ 200809L
    || _XOPEN_SOURCE\ >=\ 500
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
    || /* Glibc versions <= 2.19: */ _BSD_SOURCE
.RE
.PP
\fBfchownat\fP():
.PD 0
.ad l
.RS 4
.TP  4
glibc 2.10 以降:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
glibc 2.10 より前:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH 説明
これらのシステムコールは、いずれもファイルの所有者 (owner) とグループを変更する。システムコール \fBchown\fP(),
\fBfchown\fP(), \fBlchown\fP() 間の違いは、ファイルの指定の仕方だけである。
.IP * 2
\fBchown\fP()  は \fIpathname\fP で指定されたファイルの所有権を変更する。 \fIpathname\fP
がシンボリックリンクの場合は、リンクの展開が行われる。
.IP *
\fBfchown\fP()  はオープンされたファイルディスクリプター \fIfd\fP により参照されるファイルの所有権を変更する。
.IP *
\fBlchown\fP()  は \fBchown\fP()  と同じだが、シンボリックリンクを展開しない点が異なる。
.PP
特権を持つプロセス (Linux では \fBCAP_CHOWN\fP ケーパビリティ (capability) を持つプロセス) だけが
ファイルの所有者を変更できる。 ファイルの所有者は、その所有者が属しているグループのいずれかに ファイルのグループを変更することができる。 特権
(Linux では \fBCAP_CHOWN\fP)  を持つプロセスは、任意のグループに変更できる。
.PP
\fIowner\fP または \fIgroup\fP に \-1 が指定された場合、それらの ID は変更されない。
.PP
.\" In Linux 2.0 kernels, superuser was like everyone else
.\" In 2.2, up to 2.2.12, these bits were not cleared for superuser.
.\" Since 2.2.13, superuser is once more like everyone else.
非特権ユーザーにより実行ファイルの所有者またはグループが 変更された場合は \fBS_ISUID\fP と \fBISGID\fP モードビットはクリアされる。
POSIX はこの動作や root が \fBchown\fP()  を行なった場合については特に指定されていない。
.\"O the Linux behavior depends on the kernel version,
.\"O and since Linux 2.2.13, root is treated like other users.
Linuxにおける動作はカーネルのバージョンに依存し、
Linux 2.2.13 以降では、root は他のユーザと同じように扱われる。
非グループ実行ファイル (\fBS_IXGRP\fP ビットが設定されていないファイル) の場合には
\fBS_ISGID\fP ビットは強制ロック (mandatory locking) を意味している。 そしてそれは \fBchown\fP()
ではクリアできない。
.PP
.\"O When the owner or group of an executable file is changed (by any user),
.\"O all capability sets for the file are cleared.
実行ファイルの所有者やグループが (他のユーザに) 変更された場合、
ファイルのすべてのケーパビリティセットがクリアされる。
.\"
.SS fchownat()
\fBfchownat\fP() システムコールは \fBchown\fP() と全く同様に動作するが、以下で説明する点が異なる。
.PP
\fIpathname\fP で指定されたパス名が相対パスの場合、このパス名はファイルディスクリプター \fIdirfd\fP
が参照するディレクトリに対する相対パスと解釈される (\fBchown\fP()
に相対パス名を渡した場合のように、呼び出したプロセスのカレントワーキングディレクトリに対する相対パスではない)。
.PP
\fIpathname\fP で指定されたパス名が相対パスで、 \fIdirfd\fP が特別な値 \fBAT_FDCWD\fP の場合、 (\fBchown\fP()
と同様に) \fIpathname\fP は呼び出したプロセスのカレントワーキングディレクトリに対する相対パスと解釈される。
.PP
\fIpathname\fP で指定されたパス名が絶対パスの場合、 \fIdirfd\fP は無視される。
.PP
\fIflags\fP 引き数は、以下に示す値の 0 個以上の OR (論理和) をとって作成される ビットマスクである。
.TP 
\fBAT_EMPTY_PATH\fP (Linux 2.6.39 以降)
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
\fIpathname\fP が空文字列の場合、 \fIdirfd\fP が参照するファイルに対して操作を行う (\fIdirfd\fP は \fBopen\fP(2)
\fBO_PATH\fP フラグを使って取得することができる)。この場合、 \fIdirfd\fP
は、ディレクトリだけでなく、任意のタイプのファイルを参照することができる。 \fIdirfd\fP が \fBAT_FDCWD\fP
の場合、この呼び出しはカレントワーキングディレクトリに対して操作を行う。このフラグは Linux 固有であり、その定義を得るには
\fB_GNU_SOURCE\fP を定義すること。
.TP 
\fBAT_SYMLINK_NOFOLLOW\fP
\fIpathname\fP がシンボリックリンクの場合、リンクの展開を行わない。代わりに、\fBlchown\fP()
同様、リンク自身に対して操作を行う。(デフォルトでは \fBfchownat\fP() は \fBchown\fP() と同様にシンボリックリンクの展開を行う。)
.PP
\fBfchownat\fP() の必要性についての説明については \fBopenat\fP(2) を参照。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
ファイルシステムによっては、下記の一覧にない他のエラーが返されることもある。
.PP
\fBchown\fP()  でごく一般的なエラーを以下に挙げる:
.TP 
\fBEACCES\fP
パス名の構成要素に検索許可がない (\fBpath_resolution\fP(7)  も見よ)。
.TP 
\fBEFAULT\fP
\fIpathname\fP がアクセス可能なアドレス空間の外を指している。
.TP 
\fBELOOP\fP
\fIpathname\fP を解決するときに、解決すべきシンボリックリンクが多すぎた。
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP が長過ぎる。
.TP 
\fBENOENT\fP
ファイルが存在しない。
.TP 
\fBENOMEM\fP
カーネルに十分なメモリーがない。
.TP 
\fBENOTDIR\fP
パス名の構成要素がディレクトリではない。
.TP 
\fBEPERM\fP
呼び出したプロセスに所有者またはグループ (もしくはその両方) を変更するために 要求される許可 (上記を参照) がない。
.TP 
.B EPERM
.\"O The file is marked immutable or append-only.
.\"O (See
.\"O .BR ioctl_iflags (2).)
ファイルが複製不可 (immutable) または追加のみとマークされている。
.RB ( ioctl_iflags (2)
を参照。)
.TP
\fBEROFS\fP
ファイルが読み込み専用 (read only) のファイルシステム上にある。
.PP
\fBfchown\fP()  で一般的なエラーを以下に挙げる:
.TP 
\fBEBADF\fP
.\"O .I fd
.\"O is not a valid open file descriptor.
.I fd
が有効なオープンファイルディスクリプターでない。
.TP 
\fBEIO\fP
i ノード (inode) を変更する際に低レベル I/O エラーが発生した。
.TP 
\fBENOENT\fP
上記を参照。
.TP 
\fBEPERM\fP
上記を参照。
.TP 
\fBEROFS\fP
上記を参照。
.PP
\fBchown\fP() で発生するのと同じエラーが \fBfchownat\fP() でも起こる。 \fBfchownat\fP() では以下のエラーも発生する。
.TP 
\fBEBADF\fP
\fIdirfd\fP が適切なファイルディスクリプターでない。
.TP 
\fBEINVAL\fP
\fIflags\fP に無効なフラグが指定された。
.TP 
\fBENOTDIR\fP
\fIpathname\fP が相対パスで、 \fIdirfd\fP がディレクトリ以外のファイルを参照しているファイルディスクリプターである。
.SH バージョン
\fBfchownat\fP()  はカーネル 2.6.16 で Linux に追加された。 ライブラリによるサポートはバージョン 2.4 以降の glibc
で利用できる。
.SH 準拠
\fBchown\fP(), \fBfchown\fP(), \fBlchown\fP(): 4.4BSD, SVr4, POSIX.1\-2001,
POSIX.1\-2008.
.PP
.\" chown():
.\" SVr4 documents EINVAL, EINTR, ENOLINK and EMULTIHOP returns, but no
.\" ENOMEM.  POSIX.1 does not document ENOMEM or ELOOP error conditions.
.\" fchown():
.\" SVr4 documents additional EINVAL, EIO, EINTR, and ENOLINK
.\" error conditions.
4.4BSD 版ではスーパーユーザーのみが使用できる (つまり、普通のユーザーはファイルを手放すことはできない)。
.PP
\fBfchownat\fP(): POSIX.1\-2008.
.SH 注意
.SS 新しいファイルの所有権
(\fBopen\fP(2)  や \fBmkdir\fP(2)  などにより) 新しいファイルが作成されるとき、
その所有者は呼び出したプロセスのファイルシステムユーザー ID と 同じに設定される。 そのファイルのグループはいくつかの要因により決定される。
その要因としては、 ファイルシステムの種類、そのファイルシステムのマウント時に 使用されたオプション、親ディレクトリで set\-group\-ID
モードビットが 有効になっているどうか、がある。 ファイルシステムが \fBmount\fP(8)  オプションの \fB\-o\ grpid\fP (\fB\-o\ bsdgroups\fP も同義語) と \fB\-o\ nogrpid\fP (\fB\-o sysvgroups\fP も同義語)
に対応している場合、ルールは以下の通りとなる。
.IP * 2
ファイルシステムが \fB\-o\ grpid\fP 付きでマウントされている場合、新しいファイルのグループは 親ディレクトリのグループと同じになる。
.IP *
ファイルシステムが \fB\-o\ nogrpid\fP 付きでマウントされており、親ディレクトリでは set\-group\-ID ビットが
無効になっている場合、新しいファイルのグループは プロセスのファイルシステム GID と同じになる。
.IP *
ファイルシステムが \fB\-o\ nogrpid\fP 付きでマウントされており、親ディレクトリでは set\-group\-ID ビットが
有効になっている場合、新しいファイルのグループは 親ディレクトリのグループと同じになる。
.PP
Linux 4.12 では、マウントオプション \fB\-o\ grpid\fP と \fB\-o\ nogrpid\fP に対応しているファイルシステムは
ext2, ext3, ext4, XFS である。 これらのマウントオプションに対応していないファイルシステムでは、 \fB\-o\ nogrpid\fP
に関するルールが適用される。
.SS "glibc での注意"
\fBfchownat\fP() が利用できない古いカーネルでは、 glibc ラッパー関数は \fBchown\fP() を使用するモードにフォールバックする。
\fIpathname\fP が相対パスの場合、 glibc は \fIdirfd\fP 引き数に対応する \fI/proc/self/fd\fP
のシンボリックリンクに基づいてパス名を構成する。
.SS NFS
\fBchown\fP()  方式は UID マッピングを使用した NFS ファイルシステムを侵害する。
さらにファイルの内容にアクセスする全てのシステムコールを侵害する。 これは \fBchown\fP()  が既にオープンされたファイルに対する
アクセスをただちに取り消すことによる。 クライアント側のキャッシュにより所有権が変更されて
ユーザーのアクセスが許した時点と、実際に他のクライアントでユーザーによって ファイルにアクセスできる時点との間に時間差があるかもしれない。
.SS 歴史的な詳細
元々の Linux の \fBchown\fP(), \fBfchown\fP(), \fBlchown\fP() システムコールは、
16 ビットのユーザー ID とグループ ID だけに対応していた。
その後、 32 ビットの ID に対応した \fBchown32\fP(), \fBfchown32\fP(), \fBlchown32\fP()
が Linux 2.4 で追加された。
\fBchown\fP(), \fBfchown\fP(), \fBlchown\fP() の glibc のラッパー関数は、
カーネルのバージョンによる違いを吸収している。
.PP
Linux の 2.1.81 より前のバージョン (特に 2.1.46 以前) では、 \fBchown\fP()  はシンボリックリンクを追跡しない。
Linux 2.1.81 以降では \fBchown\fP()  はシンボリックリンクを追跡し、新たなシステムコール \fBlchown\fP()
はシンボリックリンクを追跡しない。 Linux 2.1.86 以降ではこの新しいコール (古い \fBchown\fP()  と全く同じ動作を行なう)
は同じシステムコール番号を持ち \fBchown\fP()  は新しく導入された番号を持つ。
.SH 例
.PP
以下のプログラムは、 二つ目のコマンドライン引き数で指定された名前のファイルの所有者を、 一つ目のコマンドライン引き数で指定された値に変更する。
新しい所有者は、数字のユーザー ID かユーザー名のいずれかで指定できる (ユーザー名で指定した場合には、 \fBgetpwnam\fP(3)
を使ってシステムのパスワードファイルの検索が行われ、 ユーザー ID への変換が行われる)。
.SS プログラムのソース
.EX
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;

    if (argc != 3 || argv[1][0] == \(aq\e0\(aq) {
        fprintf(stderr, "%s <owner> <file>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    uid = strtol(argv[1], &endptr, 10);  /* Allow a numeric string */

    if (*endptr != \(aq\e0\(aq) {         /* Was not pure numeric string */
        pwd = getpwnam(argv[1]);   /* Try getting UID for username */
        if (pwd == NULL) {
            perror("getpwnam");
            exit(EXIT_FAILURE);
        }

        uid = pwd\->pw_uid;
    }

    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
.BR chgrp (1),
.BR chown (1),
.BR chmod (2),
.BR flock (2),
.BR path_resolution (7),
.BR symlink (7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.07 の一部である。
プロジェクトの説明、バグ報告に関する情報、このページの最新版は、
http://www.kernel.org/doc/man\-pages/ に書かれている。
