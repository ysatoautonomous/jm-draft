.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2004, 2006, 2007, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Removed note about old kernel (pre-1.1.44) using wrong id on path.
.\" Modified 1996-03-18 by Martin Schulze (joey@infodrom.north.de):
.\"   Stated more clearly how it behaves with symbolic links.
.\" Added correction due to Nick Duffek (nsd@bbc.com), aeb, 960426
.\" Modified 1996-09-07 by Michael Haardt:
.\"   Restrictions for NFS
.\" Modified 1997-09-09 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 1998-01-13 by Michael Haardt:
.\"   Using access is often insecure
.\" Modified 2001-10-16 by aeb
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-23 by Michael Kerrisk
.\" 2007-06-10, mtk, various parts rewritten, and added BUGS section.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997-1998 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-12-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1998-05-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-12-14, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-06-17, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-09-04, Akihiro MOTOKI, LDP v2.64
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated & Modified Wed Dec 30 02:23:23 JST 2020
.\"         by Yuichi SATO <ysato444@ybb.ne.jp>
.\"
.TH ACCESS 2 2016-03-15 "Linux" "Linux Programmer's Manual"
.SH 名前
access, faccessat \- ユーザーのファイルへのアクセス権をチェックする
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBint access(const char *\fP\fIpathname\fP\fB, int \fP\fImode\fP\fB);\fP

\fB#include <fcntl.h>           \fP/* AT_* 定数の定義 */
\fB#include <unistd.h>\fP
.PP
\fBint faccessat(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB, int \fP\fImode\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.PP
\fBfaccessat\fP():
.PD 0
.ad l
.RS 4
.TP  4
glibc 2.10 以降:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
glibc 2.10 より前:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH 説明
\fBaccess\fP()  は、呼び出し元プロセスがファイル \fIpathname\fP にアクセスできるかどうかをチェックする。 \fIpathname\fP
がシンボリックリンクの場合、シンボリックリンクは展開される。
.PP
.\" F_OK is defined as 0 on every system that I know of.
\fImode\fP はチェックを行うアクセス権を指定するもので、その値は \fBF_OK\fP、 もしくは \fBR_OK\fP, \fBW_OK\fP, \fBX_OK\fP の
1個以上のビット単位の論理和から構成されるマスクである。 \fBF_OK\fP はファイルが存在するかどうかのみを検査する。 \fBR_OK\fP,
\fBW_OK\fP, \fBX_OK\fP は、ファイルが存在して、それぞれ読み込み、書き込み、実行の許可があるか を検査する。
.PP
チェックは、実際に操作が行われる際に使用される実効 (effective) ID でなく、 呼び出し元プロセスの \fI実 (real)\fP UID と
\fI実 (real)\fP GID を使って行われる。
.\"O Similarly, for the root user, the check uses the set of
.\"O permitted capabilities rather than the set of effective
.\"O capabilities; and for non-root users, the check uses an empty set
.\"O of capabilities.
同様に、root ユーザーに対しては、実効ケーパビリティではなく、
許可されたケーパビリティのセットをチェックする。
root 以外のユーザでは、ケーパビリティの空のセットをチェックする。
.PP
.\"O This allows set-user-ID programs and capability-endowed programs
.\"O to easily determine the invoking user's authority.
これにより、set\-user\-ID プログラムと、
ケーパビリティが与えられたプログラムで、
プログラムを起動するユーザーの権限を簡単に決定することができる。
.\"O In other words,
.\"O .BR access ()
.\"O does not answer the "can I read/write/execute this file?" question.
言い換えると、
.BR access ()
は「私がこのファイルに対して読み出し/書き込み/実行ができるか？」という
質問には答えない。
.\"O It answers a slightly different question:
.\"O "(assuming I'm a setuid binary) can
.\"O .I the user who invoked me
.\"O read/write/execute this file?",
.BR access ()
は少し異なった質問
「(私が setuid バイナリであると仮定して) 
.I 私をよびだしたユーザーが
このファイルに対して読み出し/書き込み/実行ができるか？」に答える。
.\"O which gives set-user-ID programs the possibility to
.\"O prevent malicious users from causing them to read files
.\"O which users shouldn't be able to read.
これにより、set-user-ID プログラムに対して、
悪意のあるユーザーが、読み出しの出来ないファイルを
読み込むことを防止できるようになる。
.PP
呼び出し元プロセスが特権プロセス (つまり、プロセスの実 UID が 0) の場合、 通常のファイルに対する \fBX_OK\fP
のチェックは、そのファイルの所有者、グループ、他人のいずれかの 実行許可が有効になっていれば成功する。
.SS faccessat()
\fBfaccessat\fP() システムコールは \fBaccess\fP() と全く同様に動作するが、以下で説明する点が異なる。
.PP
\fIpathname\fP で指定されたパス名が相対パスの場合、このパス名はファイルディスクリプター \fIdirfd\fP
が参照するディレクトリに対する相対パスと解釈される (\fBaccess\fP()
に相対パス名を渡した場合のように、呼び出したプロセスのカレントワーキングディレクトリに対する相対パスではない)。
.PP
\fIpathname\fP で指定されたパス名が相対パスで、 \fIdirfd\fP が特別な値 \fBAT_FDCWD\fP の場合、 (\fBaccess\fP()
と同様に) \fIpathname\fP は呼び出したプロセスのカレントワーキングディレクトリに対する相対パスと解釈される。
.PP
\fIpathname\fP で指定されたパス名が絶対パスの場合、 \fIdirfd\fP は無視される。
.PP
\fIflags\fP は以下に示す値の 0 個以上の OR (論理和) をとって作成される。
.TP 
\fBAT_EACCESS\fP
アクセスチェックを実行ユーザー/グループ ID を使って行う。デフォルトでは、\fBfaccessat\fP() は (\fBaccess\fP() と同様に) 実
ID を使用する。
.TP 
\fBAT_SYMLINK_NOFOLLOW\fP
\fIpathname\fP がシンボリックリンクの場合、リンクの展開を行わない。代わりに、リンク自身の情報を返す。
.PP
\fBfaccessat\fP() の必要性についての説明については \fBopenat\fP(2) を参照。
.SH 返り値
成功した場合 (要求した全てについて許可が得られたか、 \fImode\fP が \fBF_OK\fP でファイルが存在した場合)、ゼロが返される。 エラーの場合
(\fImode\fP の少なくとも一つのビットで要求した許可がなかった場合、 \fImode\fP が \fBF_OK\fP
でファイルが存在しなかった場合、他のエラーが起こった場合)、\-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
\fBaccess\fP() と \fBfaccessat\fP() は以下の場合に失敗する。
.TP 
\fBEACCES\fP
要求されたアクセスは そのファイル自身に拒否されたか \fIpathname\fP へ至るまでディレクトリのいずれかに対する検索許可 (search
permission) が得られなかった。 (\fBpath_resolution\fP(7)  も参照のこと)
.TP 
\fBELOOP\fP
\fIpathname\fP を解決するときに、解決すべきシンボリックリンクが多すぎた。
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP が長過ぎる。
.TP 
\fBENOENT\fP
\fIpathname\fP を構成するパスのいずれかが、存在しないか、 参照先のない (dangling) シンボリックリンクになっている。
.TP 
\fBENOTDIR\fP
\fIpathname\fP のディレクトリ部分が実際にはディレクトリでない。
.TP 
\fBEROFS\fP
読み込み専用 (read\-only) のファイルシステムに対して書き込み許可を 要求した。
.PP
\fBaccess\fP() と \fBfaccessat\fP() は以下の理由により失敗することがある。
.TP 
\fBEFAULT\fP
\fIpathname\fP がアクセス可能なアドレス空間の外を指している。
.TP 
\fBEINVAL\fP
\fImode\fP に不正な値が指定された。
.TP 
\fBEIO\fP
I/O エラーが発生した。
.TP 
\fBENOMEM\fP
カーネルに十分なメモリーがない。
.TP 
\fBETXTBSY\fP
実行中のファイルに対して書き込みを要求した。
.PP
\fBfaccessat\fP() では以下のエラーも発生する。
.TP 
\fBEBADF\fP
\fIdirfd\fP が適切なファイルディスクリプターでない。
.TP 
\fBEINVAL\fP
\fIflags\fP に無効なフラグが指定された。
.TP 
\fBENOTDIR\fP
\fIpathname\fP が相対パスで、 \fIdirfd\fP がディレクトリ以外のファイルを参照しているファイルディスクリプターである。
.SH バージョン
\fBfaccessat\fP()  はバージョン 2.6.16 で Linux に追加された。 ライブラリによるサポートは glibc バージョン 2.4
で追加された。
.SH 準拠
\fBaccess\fP(): SVr4, 4.3BSD, POSIX.1\-2001, POSIX.1\-2008.
.PP
\fBfaccessat\fP(): POSIX.1\-2008.
.SH 注意
.PP
\fB警告\fP: あるユーザーが、例えば \fBopen\fP(2) によるアクセスが可能かどうかを、 (実際に行う前に)
これらのシステムコールを使ってチェックするのは、セキュリティホールの原因になる。なぜならチェックをしてから
実際にファイルのオープン操作をする間の短い間隔を悪用できるからである。 \fBこの理由があるので、このシステムコールを使うのは避けるべきである。\fP
(ここで説明した例の場合には、より安全な方法としては、 そのプロセスの実効ユーザー ID を実ユーザー ID に一時的に切り替えてから
\fBopen\fP(2) を呼び出す方法がある。)
.PP
\fBaccess\fP() は常にシンボリックリンクの展開を行う。
シンボリックリンクのアクセス許可を確認する必要がある場合は、
\fBAT_SYMLINK_NOFOLLOW\fP フラグ付きで \fBfaccessat\fP() を使うこと。
.PP
\fImode\fP で指定されたアクセス種別のいずれか一つでも拒否されると、 たとえ \fImode\fP で指定された他のアクセス種別が許可されたとしても、
これらのシステムコールはエラーを返す。
.PP
.\" HPU-UX 11 and Tru64 5.1 do this.
POSIX.1\-2001 では、 呼び出し元プロセスが適切な特権を持っている場合 (つまり、スーパーユーザーの場合)、
たとえファイルの実行許可ビットが全くセットされていなくても \fBX_OK\fP のチェックとして成功を返す実装が認められている。 Linux
はこのようにはなっていない。
.PP
\fIpathname\fP のプレフィックスを構成するディレクトリの全てに対して 検索アクセス (すなわち、実行アクセス) が許可された場合にのみ、
ファイルはアクセス可能となる。 いずれかのディレクトリがアクセス不可の場合、 ファイル自身のアクセス許可に関わらず、 \fBaccess\fP()
は失敗する。
.PP
アクセスビットのみがチェックされ、ファイルの種類や内容はチェックされない。 従って、ディレクトリが書き込み可能となった場合は、ディレクトリに
ファイルを作成することが可能なことを意味するのであり、ディレクトリに ファイルとして書き込むことができるわけではない。 同様に DOS
のファイルは「実行可能」と判断されるが、 \fBexecve\fP(2)  コールは失敗するだろう。
.PP
.\"
.\"
これらのシステムコールは、 UID マッピングを使用した NFSv2 ファイルシステムでは正常に機能しないかもしれない。なぜならば UID
のマッピングはサーバーで 行なわれ、権利のチェックをするクライアントには見えないからである。 (NFS バージョン 3
以降ではサーバー側でチェックが実行される。) 同様の問題は FUSE マウントでも起こり得る。
.\"O .SS C library/kernel differences
.SS "C ライブラリとカーネルの違い"
生の \fBfaccessat\fP() システムコールは、最初の 3 つの引き数だけを取る。フラグ \fBAT_EACCESS\fP と
\fBAT_SYMLINK_NOFOLLOW\fP は実際には \fBfaccessat\fP() の glibc
のラッパー関数内で実装されている。これらのフラグのいずれかが指定された場合、ラッパー関数は \fBfstatat\fP(2)
を使ってアクセス許可の判定を行う。
.SS "glibc での注意"
\fBfaccessat\fP() が利用できない古いカーネルでは、(フラグ \fBAT_EACCESS\fP と \fBAT_SYMLINK_NOFOLLOW\fP
が指定されていない場合) glibc ラッパー関数は \fBaccess\fP() を使用するモードにフォールバックする。 \fIpathname\fP
が相対パスの場合、 glibc は \fIdirfd\fP 引き数に対応する \fI/proc/self/fd\fP
のシンボリックリンクに基づいてパス名を構成する。
.SH バグ
.\" This behavior appears to have been an implementation accident.
バージョン 2.4 (とそれ以前) のカーネルには、スーパーユーザーでの \fBX_OK\fP のチェックの扱いに奇妙な点がある。
ディレクトリ以外のファイルで (ユーザー、グループ、他人の) 全てのカテゴリーについて 実行許可がない場合、 \fBaccess\fP()  のチェックで
\-1 が返るのは \fImode\fP に \fBX_OK\fP だけが指定されたときだけであり \fImode\fP に \fBR_OK\fP や \fBW_OK\fP
が一緒に指定された場合には \fBaccess\fP()  は 0 を返す。 (バージョン 2.6.3 以前の) 初期の 2.6 系のカーネルも 2.4
系のカーネルと同様の動作をする。
.PP
2.6.20 より前のカーネルでは、 これらのシステムコールはファイルが存在するファイルシステムを \fBmount\fP(2) する際に指定された
\fBMS_NOEXEC\fP フラグの効果を無視していた。 カーネル 2.6.20 以降では、 \fBMS_NOEXEC\fP
フラグは考慮されるようになっている。
.SH 関連項目
.BR chmod (2),
.BR chown (2),
.BR open (2),
.BR setgid (2),
.BR setuid (2),
.BR stat (2),
.BR euidaccess (3),
.BR credentials (7),
.BR path_resolution (7),
.BR symlink (7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.07 の一部である。
プロジェクトの説明、バグ報告に関する情報、このページの最新版は、
http://www.kernel.org/doc/man\-pages/ に書かれている。
