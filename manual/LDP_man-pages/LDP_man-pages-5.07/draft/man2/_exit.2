.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 23:02:38 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2001-11-17, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 KUNIMOTO Yasuhiro, all rights reserved.
.\" Translated Jun 27, 1997 by KUNIMOTO Yasuhiro (hiro@kthree.co.jp)
.\" Modified  Jun 28, 1997 by Yoshiki Sugiura (yox@in.aix.or.jp)
.\" Modified  Jul  6, 1997 by Yoshiki Sugiura (yox@in.aix.or.jp)
.\" Updated & Modified Sun Dec  9 20:02:10 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated Sat Sep  3 04:26:00 JST 2005
.\"         by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified Tue Dec 29 23:47:24 JST 2020
.\"         by Yuichi SATO <ysato444@ybb.ne.jp>
.\"
.TH _EXIT 2 2020-02-09 "Linux" "Linux Programmer's Manual"
.SH 名前
_exit, _Exit \- 呼び出し元のプロセスを終了させる
.SH 書式
\fB#include <unistd.h>\fP
.PP
\fBvoid _exit(int \fP\fIstatus\fP\fB);\fP

\fB#include <stdlib.h>\fP
.PP
\fBvoid _Exit(int \fP\fIstatus\fP\fB);\fP
.PP
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.PP
.ad l
\fB_Exit\fP():
.RS 4
_ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH 説明
.\"O .BR _exit ()
.\"O terminates the calling process "immediately".
.BR _exit ()
は、それを呼んだプロセスを「直ちに」終了させる。
.\"O Any open file descriptors belonging to the process are closed.
その際、このプロセスが所有しているディスクリプター (descriptor) で、
オープンされているものは全てクローズされる。
.\"O Any children of the process are inherited by
.\"O .BR init (1)
.\"O (or by the nearest "subreaper" process as defined through the use of the
.\"O .BR prctl (2)
.\"O .B PR_SET_CHILD_SUBREAPER
.\"O operation).
プロセスの子プロセスは
.BR init (1)
(もしくは
.BR prctl (2)
.B PR_SET_CHILD_SUBREAPER
操作で定義された最も近い先祖の "subreaper" プロセス) によって継承される。
.\"O The process's parent is sent a
.\"O .B SIGCHLD
.\"O signal.
このプロセスの親プロセスに対して \fBSIGCHLD\fP シグナルが送出される。
.PP
.\"O The value
.\"O .I "status & 0xFF"
.\"O is returned to the parent process as the process's exit status, and
.\"O can be collected by the parent using one of the
.\"O .BR wait (2)
.\"O family of calls.
.I "status & 0xFF"
の値は、このプロセスの終了状態としてその親プロセスに対して返され、
.BR wait (2)
系関数を利用することによって取得することができる。
.PP
.\"O The function
.\"O .BR _Exit ()
.\"O is equivalent to
.\"O .BR _exit ().
関数
.BR _Exit ()
は
.BR _exit ()
と等価である。
.SH 返り値
これらの関数は値を返さない。
.SH 準拠
POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.
関数
.BR _Exit ()
は C99 で導入された。
.SH 注意
exit の効果、終了状態の受渡し、ゾンビプロセス、シグナル送出などに
ついての議論は、 \fBexit\fP(3) を参照すること。
.PP
関数 \fB_exit\fP()  は \fBexit\fP(3)  に似ているが、ANSI C の \fBatexit\fP(3)  や \fBon_exit\fP(3)
によって登録されたいかなる関数も呼び出さない。
.\"O Open
.\"O .BR stdio (3)
.\"O streams are not flushed.
オープンされた
.BR stdio (3)
ストリームはフラッシュされない。
一方で、 \fB_exit\fP()
はオープンされているファイルディスクリプターをクローズしないため、 未決定になっている出力がフラッシュされるのを待つのに不確定な遅れが発生する。
この遅れを発生させたくなければ、 \fB_exit\fP()  の前に \fBtcflush\fP(3)  のような関数を呼び出せばよい。 \fB_exit\fP()
が呼び出されたときに、 未決定になっている全ての I/O がキャンセルされるのか、 またどの I/O がキャンセルされるのかは実装に依存する。
.\"O .SS C library/kernel differences
.SS "C ライブラリとカーネルの違い"
バージョン 2.3 より前の glibc では、 \fB_exit\fP()  のラッパー関数は同じ名前のカーネルシステムコールを起動していた。 glibc
2.3 以降では、プロセス内の全てのスレッドを終了するために、 ラッパー関数は \fBexit_group\fP(2)  を起動する。
.\"O (The raw
.\"O .BR _exit ()
.\"O system call terminates only the calling thread.)
(元々の
.BR _exit ()
システムコールは呼び出しスレッドのみを終了する。)
.SH 関連項目
.BR execve (2),
.BR exit_group (2),
.BR fork (2),
.BR kill (2),
.BR wait (2),
.BR wait4 (2),
.BR waitpid (2),
.BR atexit (3),
.BR exit (3),
.BR on_exit (3),
.BR termios (3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.07 の一部である。
プロジェクトの説明、バグ報告に関する情報、このページの最新版は、
http://www.kernel.org/doc/man\-pages/ に書かれている。
