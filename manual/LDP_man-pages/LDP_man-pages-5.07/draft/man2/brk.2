.\" Copyright (c) 1993 Michael Haardt, (michael@moria.de)
.\" and Copyright 2006, 2008, Michael Kerrisk <tmk.manpages@gmail.com>
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 21 19:52:58 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:40:38 1994 by Rik Faith <faith@cs.unc.edu>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 TABATA Tomohira
.\"         all rights reserved.
.\" Translated Wed Jun 26 19:12:54 JST 1996
.\"         by TABATA Tomohira <loba@k2.t.u-tokyo.ac.jp>
.\" Modified Sat Dec 13 23:43:56 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified Wed May 19 01:55:29 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>, LDP v1.66
.\" Updated & Modified Tue Jan  2 09:09:47 JST 2007 by Yuichi SATO, LDP v2.43
.\" Updated 2008-08-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.TH BRK 2 2016-03-15 "Linux" "Linux Programmer's Manual"
.SH 名前
brk, sbrk \- データセグメントのサイズの変更する
.SH 書式
\fB#include <unistd.h>\fP
.PP
\fBint brk(void *\fP\fIaddr\fP\fB);\fP
.PP
\fBvoid *sbrk(intptr_t \fP\fIincrement\fP\fB);\fP
.PP
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.PP
\fBbrk\fP(), \fBsbrk\fP():
.ad l
.RS 4
.PD 0
.TP  4
.\"O Since glibc 2.19:
glibc 2.19 以降:
.nf
_DEFAULT_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500) &&
.\"    (_XOPEN_SOURCE\ >=\ 500 ||
.\"        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    ! (_POSIX_C_SOURCE\ >=\ 200112L)
.fi
.TP  4
.\"O From glibc 2.12 to 2.19:
glibc 2.12 から 2.19 まで:
.nf
_BSD_SOURCE || _SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500) &&
.\"    (_XOPEN_SOURCE\ >=\ 500 ||
.\"        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    ! (_POSIX_C_SOURCE\ >=\ 200112L)
.fi
.TP 4
.\"O Before glibc 2.12:
glibc 2.12 より前:
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.SH 説明
\fBbrk\fP()  と \fBsbrk\fP()  は \fIプログラムブレーク (program break)\fP の場所を変更する。
プログラムブレークはプロセスのデータセグメント (data segment) の 末尾を示す (プログラムブレークは、初期化されていない
データセグメントの末尾の直後の場所となる)。 プログラムブレークを増やすということは、そのプロセスへの メモリーを割り当てる効果があり、
プログラムブレークを減らすということは、メモリーを解放する ということである。
.PP
\fBbrk\fP()  は、データセグメントの末尾を \fIaddr\fP で指定した値に設定する。 設定が行われるのは、指定した値が有効で、
システムに十分なメモリーがあり、 プロセスのデータサイズの最大値を超えていない場合である (\fBsetrlimit\fP(2)  を参照)。
.PP
\fBsbrk\fP()  は、プログラムのデータ空間を \fIincrement\fP バイトだけ増やす。 \fIincrement\fP を 0 にして
\fBsbrk\fP()  を呼び出すことで、プログラムの現在のブレーク (break) 場所を知ることができる。
.SH 返り値
成功した場合、 \fBbrk\fP()  は 0 を返す。 エラーの場合には、\-1 を返し、 \fIerrno\fP に \fBENOMEM\fP を設定する。
.PP
成功した場合、 \fBsbrk\fP()  は変更前のプログラムブレークを返す (プログラムブレークが増やされた場合、この値は
新しく割り当てられたメモリーの先頭を指すポインターとなる)。 エラーの場合には、 \fI(void\ *)\ \-1\fP を返し、 \fIerrno\fP に
\fBENOMEM\fP を設定する。
.SH 準拠
.\"
.\" .BR brk ()
.\" and
.\" .BR sbrk ()
.\" are not defined in the C Standard and are deliberately excluded from the
.\" POSIX.1-1990 standard (see paragraphs B.1.1.1.3 and B.8.3.3).
4.3BSD, SUSv1.  SUSv2 では「過去の名残 (LEGACY)」と位置付けられており、 POSIX.1\-2001 で削除された。
.SH 注意
\fBbrk\fP()  や \fBsbrk\fP()  を使用するのは避けること。 \fBmalloc\fP(3)  メモリー割り当てパッケージの方が、移植性が高く、
使いやすいメモリー割り当て方法を提供している。

.\" One sees
.\" \fIint\fP (e.g., XPGv4, DU 4.0, HP-UX 11, FreeBSD 4.0, OpenBSD 3.2),
.\" \fIssize_t\fP (OSF1 2.0, Irix 5.3, 6.5),
.\" \fIptrdiff_t\fP (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\" \fIintptr_t\fP (e.g., XPGv5, AIX, SunOS 5.8, 5.9, FreeBSD 4.7, NetBSD 1.6,
.\" Tru64 5.1, glibc2.2).
いろいろなシステムにおいて、 \fBsbrk\fP()  の引き数に様々な型が使われている。 一般的なのは \fIint\fP, \fIssize_t\fP,
\fIptrdiff_t\fP, \fIintptr_t\fP である。
.\"O .SS C library/kernel differences
.SS "C ライブラリとカーネルの違い"
上で説明した \fBbrk\fP()  の返り値についての動作は、 Linux の \fBbrk\fP()  システムコールをラップする glibc
の関数によるものである。 (その他の多くの実装でも、 \fBbrk\fP()  の返り値はこれと同じである。 この返り値は SUSv2 でも規定されている。)
しかし、実際の Linux システムコールは、成功した場合、 プログラムの新しいブレークを返す。
失敗した場合、このシステムコールは現在のブレークを返す。 glibc ラッパー関数は同様の働きをし (すなわち、新しいブレークが \fIaddr\fP
より小さいかどうかをチェックし)、 上で説明した 0 と \-1 という返り値を返す。
.PP
Linux では \fBsbrk\fP()  は \fBbrk\fP()  システムコールを使うライブラリ関数として実装されており、
以前のブレークの値を返すことができるように内部で調整が行われている。
.SH 関連項目
\fBexecve\fP(2), \fBgetrlimit\fP(2), \fBend\fP(3), \fBmalloc\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.07 の一部である。
プロジェクトの説明、バグ報告に関する情報、このページの最新版は、
http://www.kernel.org/doc/man\-pages/ に書かれている。
