.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-21 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998-2000 by Andi Kleen to match Linux 2.2 reality
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2008-12-04, mtk, Add documentation of accept4()
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998-2000 Shinya HANATAKA,
.\"   Takeshi Hakamada and NAKANO Takeo
.\"         all rights reserved.
.\" Translated 1998-04-06, Shinya HANATAKA <shinya@abyss.rim.or.jp>
.\"                        Takeshi Hakamada <hakamada@nsg.sgi.com>
.\" Updated & Modified 2000-10-12, NAKANO Takeo <nakano@apm.seikei.ac.jp
.\" Updated & Modified 2002-09-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2005-02-23, Akihiro MOTOKI
.\" Updated & Modified 2006-04-14, Akihiro MOTOKI, LDP v2.29
.\" Updated & Modified 2008-12-24, Akihiro MOTOKI, LDP v3.15
.\" Updated 2008-04-13, Akihiro MOTOKI, LDP v3.20
.\" Updated & Modified Wed Dec 30 01:29:30 JST 2020
.\"         Yuichi SATO <ysato444@ybb.ne.jp>, LDP 5.07
.\"
.TH ACCEPT 2 2020-04-11 "Linux" "Linux Programmer's Manual"
.SH 名前
accept, accept4 \- ソケットへの接続を受ける
.SH 書式
.nf
\fB#include <sys/types.h>\fP          /* 「注意」参照 */
\fB#include <sys/socket.h>\fP
.PP
\fBint accept(int \fP\fIsockfd\fP\fB, struct sockaddr *\fP\fIaddr\fP\fB, socklen_t *\fP\fIaddrlen\fP\fB);\fP

\fB#define _GNU_SOURCE\fP             /* feature_test_macros(7) 参照 */
\fB#include <sys/socket.h>\fP
.PP
\fBint accept4(int \fP\fIsockfd\fP\fB, struct sockaddr *\fP\fIaddr\fP\fB,\fP
\fB            socklen_t *\fP\fIaddrlen\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.SH 説明
\fBaccept\fP()  システムコールは、接続指向のソケット型 (\fBSOCK_STREAM\fP, \fBSOCK_SEQPACKET\fP)
で用いられる。 この関数は、接続待ちソケット \fIsocket\fP 宛ての保留状態の接続要求が入っているキューから
先頭の接続要求を取り出し、接続済みソケットを新規に生成し、 そのソケットを参照する新しいファイルディスクリプターを返す。
新規に生成されたソケットは、接続待ち (listen) 状態ではない。 もともとのソケット \fIsockfd\fP はこの呼び出しによって影響を受けない。
.PP
引き数 \fIsockfd\fP は、 \fBsocket\fP(2)  によって生成され、 \fBbind\fP(2)  によってローカルアドレスにバインドされ、
\fBlisten\fP(2)  を経て接続を待っているソケットである。
.PP
\fIaddr\fP 引き数は \fIsockaddr\fP 構造体へのポインターである。 この構造体には接続相手のソケットのアドレスが入っている。 \fIaddr\fP
引き数で返されるアドレスの正確なフォーマットは、 ソケットのアドレス種別によって変わる (\fBsocket\fP(2)  およびそれぞれのプロトコルの
man ページを参照)。 \fIaddr\fP が NULL の場合、 \fIaddr\fP には何も入らない。この場合、 \fIaddrlen\fP
は使用されず、この引き数は NULL にしておくべきである。
.PP
\fIaddrlen\fP 引き数は入出力両用の引き数である。呼び出し時には、呼び出し元が \fIaddr\fP が指す構造体のサイズ (バイト単位)
で初期化しておかなければならない。 返ってくる時には、接続相手のアドレスの実際の大きさが格納される。
.PP
渡されたバッファーが小さ過ぎた場合は、返されるアドレスの末尾が切り詰められる。
この場合には、 \fIaddrlen\fP には、呼び出し時に指定された値よりも大きな値が格納される。
.PP
キューに保留となっている接続要求がなく、 かつソケットが非停止になっていないときは、 \fBaccept\fP()  は接続が発生するまで呼び出し元を停止
(block) する。 ソケットが非停止になっていて、 待ち状態の接続要求がキューに無いときは、 \fBaccept\fP()  はエラー \fBEAGAIN\fP
か \fBEWOULDBLOCK\fP で失敗する。
.PP
.\"O In order to be notified of incoming connections on a socket, you can use
.\"O .BR select (2),
.\"O .BR poll (2),
.\"O or
.\"O .BR epoll (7).
ソケットへの接続到着を知るには、
.BR select (2),
.BR poll (2),
.BR epoll (7)
のいずれかを用いればよい。
新しい接続要求が来るとソケットは読み込み可能になるので、 そうしたら \fBaccept\fP()  を呼んでその接続に対するソケットを取得すればよい。
あるいはソケットに設定を行い、何らかのアクションがあったときに \fBSIGIO\fP を配送 (deliver) させるようにすることもできる。詳細は
\fBsocket\fP(7)  を参照のこと。
.PP
\fIflags\fP が 0 の場合、 \fBaccept4\fP()  は \fBaccept\fP()  と同じである。 \fIflags\fP
に以下の値をビット毎の論理和 (OR) で指定することで、 異なる動作をさせることができる。
.TP  16
.B SOCK_NONBLOCK
.\"O Set the
.\"O .BR O_NONBLOCK
.\"O file status flag on the open file description (see
.\"O .BR open (2))
.\"O referred to by the new file descriptor.
新しいファイルディスクリプターで参照される
オープンファイル記述 (open file description)
.RB ( open (2)
を参照) の \fBO_NONBLOCK\fP
ファイルステータスフラグをセットする。
このフラグを使うことで、 \fBO_NONBLOCK\fP をセットするために \fBfcntl\fP(2)
を追加で呼び出す必要がなくなる。
.TP 
\fBSOCK_CLOEXEC\fP
新しいファイルディスクリプターに対して close\-on\-exec (\fBFD_CLOEXEC\fP)  フラグをセットする。
このフラグが役に立つ理由については、 \fBopen\fP(2)  の \fBO_CLOEXEC\fP フラグの説明を参照のこと。
.SH 返り値
.\"O On success,
.\"O these system calls return a file descriptor
.\"O for the accepted socket (a nonnegative integer).
成功した場合、これらのシステムコールは受け付けたソケットの
ディスクリプターを返す (非負の整数値)。
.\"O On error, \-1 is returned,
.\"O .I errno
.\"O is set appropriately, and
.\"O .I addrlen
.\"O is left unchanged.
エラーが発生した場合は \-1 を返して、
.I errno
を適切に設定し、
.I addrlen
は変更しない。
.SS エラー処理
Linux の \fBaccept\fP()  (と \fBaccept4\fP())  は、新しいソケットにおける、発生済みのネットワークエラーを
\fBaccept\fP()  からのエラーコードとして渡す。 この振舞いは BSD ソケットの実装とは異なる。 信頼性の高い動作を行うためには、
アプリケーションはプロトコルで定義されているネットワークエラーの検知を \fBaccept\fP()  のあとに行い、それらのエラーを \fBEAGAIN\fP
と同じように扱い、再試行 (retry) を行うべきである。 TCP/IP では、以下のエラーが該当する: \fBENETDOWN\fP,
\fBEPROTO\fP, \fBENOPROTOOPT\fP, \fBEHOSTDOWN\fP, \fBENONET\fP, \fBEHOSTUNREACH\fP,
\fBEOPNOTSUPP\fP, \fBENETUNREACH\fP
.SH エラー
.TP 
\fBEAGAIN\fP または \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
.\"O The socket is marked nonblocking and no connections are
.\"O present to be accepted.
ソケットが非停止になっていて、かつ受付け対象の接続が存在しない。
.\"O POSIX.1-2001 and POSIX.1-2008
.\"O allow either error to be returned for this case,
.\"O and do not require these constants to have the same value,
.\"O so a portable application should check for both possibilities.
POSIX.1\-2001 と POSIX.1-2008 は、この場合にどちらのエラーを返すことも認めており、
これら 2 つの定数が同じ値を持つことも求めていない。
したがって、移植性が必要なアプリケーションでは、両方の可能性を
確認すべきである。
.TP 
\fBEBADF\fP
.\"O .I sockfd
.\"O is not an open file descriptor.
.I sockfd
がオープンファイルディスクリプターではない。
.TP 
\fBECONNABORTED\fP
接続が中止された。
.TP 
\fBEFAULT\fP
\fIaddr\fP 引き数がユーザーアドレス空間の書き込み可能領域にない。
.TP 
\fBEINTR\fP
有効な接続が到着する前に捕捉されたシグナルによって システムコールが中断された。 \fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
ソケットが接続待ち状態ではない。もしくは、 \fIaddrlen\fP が不正である (例えば、負の場合など)。
.TP 
\fBEINVAL\fP
(\fBaccept4\fP())  \fIflags\fP に不正な値が指定されている。
.TP 
\fBEMFILE\fP
.\"O The per-process limit on the number of open file descriptors has been reached.
1 プロセスがオープンできるファイルディスクリプター数の上限に達した。
.TP 
\fBENFILE\fP
.\"O The system-wide limit on the total number of open files has been reached.
オープンされたファイルの総数がシステム全体の上限に達した。
.TP 
\fBENOBUFS\fP, \fBENOMEM\fP
メモリーが足りない。 多くの場合は、システムメモリーが足りないわけではなく、 ソケットバッファーの大きさによるメモリー割り当ての制限である。
.TP 
\fBENOTSOCK\fP
.\"O The file descriptor
.\"O .I sockfd
.\"O does not refer to a socket.
ファイルディスクリプター
.I sockfd
がソケットを参照していない。
.TP 
\fBEOPNOTSUPP\fP
参照しているソケットの型が \fBSOCK_STREAM\fP でない。
.TP 
\fBEPROTO\fP
プロトコルエラー。
.PP
上記に加えて、Linux の \fBaccept\fP()  は以下のエラーで失敗する:
.TP 
\fBEPERM\fP
ファイアウォールのルールにより接続が禁止された。
.PP
この他に、新しいソケットに対するネットワークエラーが返されることもある。 これらはそれぞれのプロトコルで定義されている。 いろいろな Linux
カーネルでは、 以下に示すようなエラーを返すこともある。 \fBENOSR\fP, \fBESOCKTNOSUPPORT\fP,
\fBEPROTONOSUPPORT\fP, \fBETIMEDOUT\fP.  \fBERESTARTSYS\fP がトレースの最中に現れることもある。
.SH バージョン
\fBaccept4\fP()  システムコールは Linux 2.6.28 以降で利用可能である。 glibc でのサポートはバージョン 2.10
以降で利用可能である。
.SH 準拠
.\"O .BR accept ():
.\"O POSIX.1-2001, POSIX.1-2008,
.\"O SVr4, 4.4BSD
.\"O .RB ( accept ()
.\"O first appeared in 4.2BSD).
.BR accept ():
POSIX.1-2001, POSIX.1-2008,
SVr4, 4.4BSD
.RB ( accept ()
4.2BSD で初めて実装された)。
.\" The BSD man page documents five possible error returns
.\" (EBADF, ENOTSOCK, EOPNOTSUPP, EWOULDBLOCK, EFAULT).
.\" POSIX.1-2001 documents errors
.\" EAGAIN, EBADF, ECONNABORTED, EINTR, EINVAL, EMFILE,
.\" ENFILE, ENOBUFS, ENOMEM, ENOTSOCK, EOPNOTSUPP, EPROTO, EWOULDBLOCK.
.\" In addition, SUSv2 documents EFAULT and ENOSR.
.PP
\fBaccept4\fP() は非標準の Linux による拡張である。
.PP
.\" Some testing seems to show that Tru64 5.1 and HP-UX 11 also
.\" do not inherit file status flags -- MTK Jun 05
Linux では、 \fBaccept\fP()  が返す新しいソケットは listen を行っているソケットの ファイル状態フラグ
(\fBO_NONBLOCK\fP や \fBO_ASYNC\fP など) を継承「しない」。 この動作は標準的な BSD ソケットの実装とは異なっている。
移植性を考慮したプログラムではファイル状態フラグが継承されるかどうかは 前提にせず、常に \fBaccept\fP()
が返したソケットに対して全ての必要なフラグを明示的に設定するように すべきである。
.SH 注意
POSIX.1\-2001 では \fI<sys/types.h>\fP のインクルードは必須とされておらず、 Linux
ではこのヘッダーファイルは必要ではない。 しかし、歴史的には、いくつかの実装 (BSD 系) でこのヘッダーファイルが
必要であり、移植性が必要なアプリケーションではこのファイルを インクルードするのが賢明であろう。
.PP
.\"O There may not always be a connection waiting after a
.\"O .B SIGIO
.\"O is delivered or
.\"O .BR select (2),
.\"O .BR poll (2),
.\"O or
.\"O .BR epoll (7)
.\"O return a readability event because the connection might have been
.\"O removed by an asynchronous network error or another thread before
.\"O .BR accept ()
.\"O is called.
.B SIGIO
が届けられた後や、
.BR select (2),
.BR poll (2),
.BR epoll (7)
が読み込み可能イベントを返した後に、必ずしも待機中の接続があるとは
限らない。
なぜならその接続は、
.BR accept ()
が呼ばれる前に、非同期的なネットワークエラーや
他のスレッドから呼ばれた (別の) accept によって 削除されているかもしれないからである。
この場合、その \fBaccept\fP()
呼び出しは停止 (block) し、次の接続の到着を待ちつづける。 \fBaccept\fP()  に停止を行わせないようにするには、引き数に渡すソケット
\fIsockfd\fP に \fBO_NONBLOCK\fP フラグをセットしておく必要がある (\fBsocket\fP(7)  を見よ)。
.PP
.\"O For certain protocols which require an explicit confirmation,
.\"O such as DECnet,
.\"O .BR accept ()
.\"O can be thought of as merely dequeuing the next connection request and not
.\"O implying confirmation.
明示的な接続確認 (confirmation) を必要とするようなプロトコル (DECNet など) では、
.BR accept ()
は単に次の接続要求をキューから取り出すだけであり、
接続確認は行わないことに注意せよ。
.\"O Confirmation can be implied by
.\"O a normal read or write on the new file descriptor, and rejection can be
.\"O implied by closing the new socket.
接続確認は、新しいファイルディスクリプターに対する
通常の読み取り/書き込みによってなされ、接続拒否 (rejection) は新しいソケットを
クローズすることによってなされる。
.\"O Currently, only DECnet has these semantics on Linux.
現在のところ、Linux 上でこれらのセマンティクスを持つのは DECNet だけである。
.\"
.\"O .SS The socklen_t type
.SS "socklen_t 型"
.\"O In the original BSD sockets implementation (and on other older systems)
.\"O .\" such as Linux libc4 and libc5, SunOS 4, SGI
.\"O the third argument of
.\"O .BR accept ()
.\"O was declared as an \fIint\ *\fP.
オリジナルの BSD ソケット実装 (と他の古いシステム) では
.BR accept ()
の第 3 引き数は、\fIint *\fP と宣言されていた。
.\"O A POSIX.1g draft
.\"O standard wanted to change it into a \fIsize_t\ *\fPC;
.\"O .\" SunOS 5 has 'size_t *'
.\"O later POSIX standards and glibc 2.x have
.\"O .IR "socklen_t\ * ".
POSIX.1g draft 標準は、これを \fIsize_t\ *\fP に変更しようとし、
後に POSIX 標準と glibc 2.x には \fIsocklen_t *\fP が含まれるようになった。
.SH 例
.\"O See
.\"O .BR bind (2).
.BR bind (2)
参照。
.SH 関連項目
.BR bind (2),
.BR connect (2),
.BR listen (2),
.BR select (2),
.BR socket (2),
.BR socket (7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.07 の一部である。
プロジェクトの説明、バグ報告に関する情報、このページの最新版は、
http://www.kernel.org/doc/man\-pages/ に書かれている。
